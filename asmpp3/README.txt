-----------------------------------------------------
	これは SC/MP-III CPU 用のC風プリプロセッサです
-----------------------------------------------------

概要
  C風の記法で書かれたソースを入力して SC/MP-III CPU 用の
  asm ソースを出力します。

-----------------------------------------------------
アセンブル方法:
    http://john.ccac.rwth-aachen.de:8000/as/

上記サイトにある、大抵の8bit CPUをサポートしているマクロアセンブラ
を導入し、このMakefileに書かれている通りに asl コマンドでアセンブルしてください。
アセンブル出力は nibl3.p というファイルに出力されますので、それを
p2bin もしくは p2hex という変換ツールによってROMバイナリーかHEXに変換してください。

-----------------------------------------------------
文法
  C言語にちょっとだけ似ています。

・コメントの書き方や、関数の書き方は C言語風です。

・関数引数や戻り値は、直接記述できませんので、レジスタ
  渡しや、ワークエリアでの値伝播で行います。

・使用できるプリプロセッサ構文

  コメントアウト
#if 0
...
#endif

  アセンブラソース一括挿入
#asm
...
#endasm

  ソースファイルインクルード
#include "file.src"

  アセンブラソースへパススルー
#<アセンブラで記述する１行そのまま>

・使用できるレジスタ名
  A  アキュムレータ(8bit)
  E  拡張レジスタ(8bit)
  EA EとAを連結した16bitレジスタ
  PC プログラムカウンタ(16bit)
  SP スタックポインタ(16bit)
  P2 インデックスレジスタ(16bit)
  P3 インデックスレジスタ(16bit)
  T  乗除算用テンポラリレジスタ(16bit)

・制御構文
  if () {  }
  while() {  }
  do {  } while();

・注意
  条件比較で A レジスタの値に対する比較
　if ( a == p2[0] ) などすべてにおいて、 比較命令がないので
  減算命令で代用しています。

　なので、比較後、常に A reg が破壊されます。(減算結果が入ります)

  ===> 次善の策として、  条件比較でEregを左辺に書くと、LD A,E 命令を先に挿入
       するようにしました。

  すなわち、case文のようなifを書く場合、常にAregは壊れますが、
'''
    e=a;
    if(e=='A') { ... } 
    if(e=='E') { ... } 
    if(e=='Z') { ... } 
'''
  のように書けます。

  EAレジスタとの比較は、まだ未実装ですが、もちろん比較後、EAレジスタともに壊れますし
　減算結果も破壊される予定です。

・バグ等
  算術演算、論理演算のオペランドが数値定数などの場合の、即値化が正しく動いていないので
　今のところ、即値の先頭に # を書く必要があるかもしれません。(一部修正済)





-----------------------------------------------------
